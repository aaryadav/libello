import Head from 'next/head'
import Image from 'next/image'
import { styled } from '../stitches.config';

import { Box, IconBox } from '../components/base/box';
import Header from '../components/base/header.jsx';
import Sidebar from '../components/base/sidebar';
import Content from '../components/base/content.jsx';
import Button from '../components/base/button.jsx';

import Menu from '../components/menubar';
import { DividerButtons } from '../components/utils';

import React, { useState } from 'react';
import CodeCell from '@/components/CodeCell';
import MarkCell from '@/components/MarkCell';

const Seperator = styled('span', {
  // margin: '0 40px'
});

export default function Home() {
  const randomKey = Math.random().toString(36).substring(2, 15)
  const sidebarItems = [
    {
      id: 1,
      title: "",
      icon: "",
      link: "/",
    },
  ];
  const headerItems = [
    {
      id: 1,
      title: "Home",
    }
  ]

  const [cellList, setCellList] = useState([]);

  const handleAdd = (index, ctype) => {
    const list = [...cellList];
    list.splice(index + 1, 0, { cellType: ctype, content: '' });
    setCellList(list);
    console.log(`handleAdd: ${cellList}`);
  }

  const handleRemove = (index) => {
    const list = [...cellList];
    list.splice(index, 1);
    setCellList(list);
  }

  const handleUpdate = (value, index) => {
    const list = [...cellList];
    list[index]["content"] = value;
    setCellList(list);
    console.log(cellList);
  }

  return (
    <>
      <Head>
        <title>Libello</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Box>
          <Header items={headerItems}>
            <Menu />
          </Header>
          <Sidebar items={sidebarItems} />
          <Content>
            <Box css={{ display: 'flex', '& > *': { margin: '12px 12px 35px 12px' }, width: '100%', alignItems: 'center' }}>
              <IconBox onClick={() => handleAdd(cellList.length, 'code')}>
                <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8 2.75C8 2.47386 7.77614 2.25 7.5 2.25C7.22386 2.25 7 2.47386 7 2.75V7H2.75C2.47386 7 2.25 7.22386 2.25 7.5C2.25 7.77614 2.47386 8 2.75 8H7V12.25C7 12.5261 7.22386 12.75 7.5 12.75C7.77614 12.75 8 12.5261 8 12.25V8H12.25C12.5261 8 12.75 7.77614 12.75 7.5C12.75 7.22386 12.5261 7 12.25 7H8V2.75Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path></svg>
                &ensp;Code
              </IconBox>
              <IconBox onClick={() => handleAdd(cellList.length, 'markdown')}>
                <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8 2.75C8 2.47386 7.77614 2.25 7.5 2.25C7.22386 2.25 7 2.47386 7 2.75V7H2.75C2.47386 7 2.25 7.22386 2.25 7.5C2.25 7.77614 2.47386 8 2.75 8H7V12.25C7 12.5261 7.22386 12.75 7.5 12.75C7.77614 12.75 8 12.5261 8 12.25V8H12.25C12.5261 8 12.75 7.77614 12.75 7.5C12.75 7.22386 12.5261 7 12.25 7H8V2.75Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path></svg>
                &ensp;Markdown
              </IconBox>
              <Seperator>|</Seperator>
              <IconBox onClick={() => handleAdd(cellList.length, 'code')}>
                <svg width="20px" height="20px" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.24182 2.32181C3.3919 2.23132 3.5784 2.22601 3.73338 2.30781L12.7334 7.05781C12.8974 7.14436 13 7.31457 13 7.5C13 7.68543 12.8974 7.85564 12.7334 7.94219L3.73338 12.6922C3.5784 12.774 3.3919 12.7687 3.24182 12.6782C3.09175 12.5877 3 12.4252 3 12.25V2.75C3 2.57476 3.09175 2.4123 3.24182 2.32181ZM4 3.57925V11.4207L11.4288 7.5L4 3.57925Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path></svg>
                &ensp;Run All
              </IconBox>
              <IconBox onClick={() => handleAdd(cellList.length, 'code')}>
                <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.36052 0.72921C8.55578 0.533948 8.87236 0.533948 9.06763 0.72921L14.2708 5.93235C14.466 6.12761 14.466 6.4442 14.2708 6.63946L8.95513 11.9551L7.3466 13.5636C6.76081 14.1494 5.81106 14.1494 5.22528 13.5636L1.43635 9.7747C0.850563 9.18891 0.850563 8.23917 1.43635 7.65338L3.04488 6.04485L8.36052 0.72921ZM8.71407 1.78987L4.10554 6.3984L8.60157 10.8944L13.2101 6.28591L8.71407 1.78987ZM7.89447 11.6015L3.39843 7.10551L2.14346 8.36049C1.94819 8.55575 1.94819 8.87233 2.14346 9.06759L5.93238 12.8565C6.12765 13.0518 6.44423 13.0518 6.63949 12.8565L7.89447 11.6015Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path></svg>
                &ensp;Clear Outputs of All Cells
              </IconBox>
              <IconBox onClick={() => handleAdd(cellList.length, 'code')}>
                <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.84998 7.49998C1.84998 4.66458 4.05979 1.84998 7.49998 1.84998C10.2783 1.84998 11.6515 3.9064 12.2367 5H10.5C10.2239 5 10 5.22386 10 5.5C10 5.77614 10.2239 6 10.5 6H13.5C13.7761 6 14 5.77614 14 5.5V2.5C14 2.22386 13.7761 2 13.5 2C13.2239 2 13 2.22386 13 2.5V4.31318C12.2955 3.07126 10.6659 0.849976 7.49998 0.849976C3.43716 0.849976 0.849976 4.18537 0.849976 7.49998C0.849976 10.8146 3.43716 14.15 7.49998 14.15C9.44382 14.15 11.0622 13.3808 12.2145 12.2084C12.8315 11.5806 13.3133 10.839 13.6418 10.0407C13.7469 9.78536 13.6251 9.49315 13.3698 9.38806C13.1144 9.28296 12.8222 9.40478 12.7171 9.66014C12.4363 10.3425 12.0251 10.9745 11.5013 11.5074C10.5295 12.4963 9.16504 13.15 7.49998 13.15C4.05979 13.15 1.84998 10.3354 1.84998 7.49998Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path></svg>
                &ensp;Restart
              </IconBox>
              <Seperator>|</Seperator>
              <IconBox onClick={() => handleAdd(cellList.length, 'code')}>
                <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 4.5C2.5 3.09886 3.59886 2 5 2H12.499C12.7752 2 13 2.22386 13 2.5C13 2.77614 12.7761 3 12.5 3H8.69244L8.40509 3.85458C8.18869 4.49752 7.89401 5.37197 7.58091 6.29794C7.50259 6.52956 7.42308 6.76453 7.34332 7H8.5C8.77614 7 9 7.22386 9 7.5C9 7.77614 8.77614 8 8.5 8H7.00407C6.56724 9.28543 6.16435 10.4613 5.95799 11.0386C5.63627 11.9386 5.20712 12.4857 4.66741 12.7778C4.16335 13.0507 3.64154 13.0503 3.28378 13.05L3.25 13.05C2.94624 13.05 2.7 12.8037 2.7 12.5C2.7 12.1962 2.94624 11.95 3.25 11.95C3.64182 11.95 3.9035 11.9405 4.14374 11.8105C4.36443 11.691 4.65532 11.4148 4.92217 10.6683C5.10695 10.1514 5.45375 9.14134 5.8422 8H4.5C4.22386 8 4 7.77614 4 7.5C4 7.22386 4.22386 7 4.5 7H6.18187C6.30127 6.64785 6.42132 6.29323 6.53887 5.94559C6.85175 5.02025 7.14627 4.14631 7.36256 3.50368L7.53192 3H5C4.15114 3 3.5 3.65114 3.5 4.5C3.5 4.77614 3.27614 5 3 5C2.72386 5 2.5 4.77614 2.5 4.5Z" fill="currentColor"></path></svg>
                &ensp;Variables
              </IconBox>
              <IconBox onClick={() => handleAdd(cellList.length, 'code')}>
                <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.5 5.25C1.91421 5.25 2.25 4.91421 2.25 4.5C2.25 4.08579 1.91421 3.75 1.5 3.75C1.08579 3.75 0.75 4.08579 0.75 4.5C0.75 4.91421 1.08579 5.25 1.5 5.25ZM4 4.5C4 4.22386 4.22386 4 4.5 4H13.5C13.7761 4 14 4.22386 14 4.5C14 4.77614 13.7761 5 13.5 5H4.5C4.22386 5 4 4.77614 4 4.5ZM4.5 7C4.22386 7 4 7.22386 4 7.5C4 7.77614 4.22386 8 4.5 8H13.5C13.7761 8 14 7.77614 14 7.5C14 7.22386 13.7761 7 13.5 7H4.5ZM4.5 10C4.22386 10 4 10.2239 4 10.5C4 10.7761 4.22386 11 4.5 11H13.5C13.7761 11 14 10.7761 14 10.5C14 10.2239 13.7761 10 13.5 10H4.5ZM2.25 7.5C2.25 7.91421 1.91421 8.25 1.5 8.25C1.08579 8.25 0.75 7.91421 0.75 7.5C0.75 7.08579 1.08579 6.75 1.5 6.75C1.91421 6.75 2.25 7.08579 2.25 7.5ZM1.5 11.25C1.91421 11.25 2.25 10.9142 2.25 10.5C2.25 10.0858 1.91421 9.75 1.5 9.75C1.08579 9.75 0.75 10.0858 0.75 10.5C0.75 10.9142 1.08579 11.25 1.5 11.25Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path></svg>
                &ensp;Outline
              </IconBox>
            </Box>

            {cellList.map((cell, i) => {
              if (cell.cellType === 'code') {
                return (
                  <Box key={i} css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '100%' }} >
                    <CodeCell cell={cell} cellType="code" handleUpdate={handleUpdate} index={i} info={cell['content']} />
                    <DividerButtons handleAdd={handleAdd} index={i} />
                  </Box>
                )
              } else if (cell.cellType === 'markdown') {
                return (
                  <Box key={i} css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '100%' }} >
                    <MarkCell cell={cell} cellType="mark" handleUpdate={handleUpdate} index={i} info={cell['content']} />
                    <DividerButtons handleAdd={handleAdd} index={i} />
                  </Box>
                )
              }
            })}

          </Content>
        </Box>
      </main>
    </>
  )
}